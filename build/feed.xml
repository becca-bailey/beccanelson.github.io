<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Becca Nelson</title>
    <description>Thoughts on life, creativity, and technology.</description>
    <link>http://beccanelson.is/</link>
    <atom:link href="http://beccanelson.is/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 28 Dec 2017 10:33:55 -0600</pubDate>
    <lastBuildDate>Thu, 28 Dec 2017 10:33:55 -0600</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>The Benefits of Apprenticeship</title>
        <description>&lt;p&gt;In my last weeks as an apprentice here at 8th Light, I’ve been thinking a lot about what I have gained through the experience. After all, many of my fellow Dev Bootcamp graduates moved right into client work and Junior Developer roles that didn’t require the same amount of additional study and preparation. What did I gain from the experience?&lt;/p&gt;

&lt;h2 id=&quot;technical-skill&quot;&gt;Technical Skill&lt;/h2&gt;

&lt;p&gt;As an apprentice, I have worked in Clojure, Java, JavaScript, Python, C#, and Elixir. I’ve gained experience with a variety of different languages that I just wouldn’t get working at a company with a single stack and an existing codebase. I’ve had time to learn new languages, to explore topics that interest me, and to try out a variety of strategies and design patterns. While I still wouldn’t consider myself an expert, I have expanded my skill set as a generalist.&lt;/p&gt;

&lt;p&gt;In my exploration of various languages and programming styles, I have learned not just the ways each language is different, but the ways that the fundamentals of writing clean code are the same in every language. As technology changes and languages come in and out of vogue, I think having this foundation is essential.&lt;/p&gt;

&lt;h2 id=&quot;test-driven-development&quot;&gt;Test-Driven-Development&lt;/h2&gt;

&lt;p&gt;Though this probably falls under “Technical Skill”, I think it is important enough to deserve its own heading.&lt;/p&gt;

&lt;p&gt;I know enough other developers to know that finding a workplace that truly values TDD is the exception, rather than the rule. As a matter of fact, as someone who regularly has conversations about unit testing at the dinner table, it’s been interesting to compare experiences. From my dad who wrote software in Fortran and Cobol before the days of automated testing, to my know-it-all brother who “generally writes pretty good Javascript”, to my boyfriend who bothered his coworkers so much about writing unit tests that his company recently added “head of unit testing strategy” to his job title, I know that commitment to test-driven-development is definitely not standard across the board.&lt;/p&gt;

&lt;p&gt;While I will not claim that writing lots of tests automatically makes me a better developer than any of the other people who share their opinions with me on a regular basis, I will say that I am thankful for the opportunity I have had to practice TDD though katas and small projects before applying my skills to a large codebase. I’ve learned that it’s not just the number of tests I write or the amount of test coverage, but the quality of the tests as well. I’ve gained experience writing tests that describe the overall behavior and intent of the code in addition to the small pieces of functionality in every method or function.&lt;/p&gt;

&lt;h2 id=&quot;mentorship&quot;&gt;Mentorship&lt;/h2&gt;

&lt;p&gt;Being an apprentice means that you get a level of one-on-one mentorship that you just don’t get in every job. I have saved this one for last, not only because I think it has been the biggest benefit to me personally, but because I think it’s the most important aspect of apprenticeship.&lt;/p&gt;

&lt;p&gt;I will admit that it’s been hard at times to have made it through four months of freelancing, five months of Dev Bootcamp, two months of job searching, and seven months of apprenticeship, and still feel like I have no idea what I’m doing. When many of my developer friends have settled into a smaller niche where they feel mostly competent, sometimes it’s been hard to maintain growth mindset when there are so many new things to learn every day.&lt;/p&gt;

&lt;p&gt;However, I know that I am a much better developer than I was all those months ago, and it’s mostly due to support, accountability, and code reviews from my mentors. I know that I wouldn’t be where I am today if I were in this alone, and didn’t have people pushing me outside my comfort zone on a daily basis.&lt;/p&gt;

&lt;p&gt;No matter where I end up in the years to come, I consider myself quite fortunate having been through this experience, and I hope to continue the tradition of learning and passing on my knowledge as I continue in my career.&lt;/p&gt;
</description>
        <pubDate>Mon, 31 Oct 2016 00:00:00 -0500</pubDate>
        <link>http://beccanelson.is/the-benefits-of-apprenticeship</link>
        <guid isPermaLink="true">http://beccanelson.is/the-benefits-of-apprenticeship</guid>
        
        
      </item>
    
      <item>
        <title>Associations in Phoenix: Many to Many</title>
        <description>&lt;p&gt;In &lt;a href=&quot;/associations-in-phoenix&quot;&gt;my last post&lt;/a&gt;, I gave an example of a one-to-many association in Phoenix. But as you can see in my schema, I also have a many-to-many relationship between Books and Tags.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Screen Shot 2016-10-20 at 5.08.16 PM.png&quot; alt=&quot;schema&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;many-to-many-associations&quot;&gt;Many-to-many associations&lt;/h2&gt;

&lt;p&gt;Luckily, the latest version of Phoenix provides an easy way to create this relationship. While Rails would use the &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many&lt;/code&gt; helper in both models to describe the relationship, Phoenix provides you with a &lt;code class=&quot;highlighter-rouge&quot;&gt;many-to-many&lt;/code&gt; helper for the model’s schema.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# in models/book.ex&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;books&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:integer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:check_outs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bookish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CheckOut&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;many_to_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bookish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;join_through:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bookish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BookTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;on_delete:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:delete_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;on_replace:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:delete&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# in models/tag.ex&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tags&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;many_to_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bookish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;join_through:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bookish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BookTag&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;many_to_many&lt;/code&gt; requires a &lt;code class=&quot;highlighter-rouge&quot;&gt;join_through&lt;/code&gt; attribute, which points to the join table. In my example, I also specified &lt;code class=&quot;highlighter-rouge&quot;&gt;on_delete&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;on_replace&lt;/code&gt; options that will delete or replace the association if the model is deleted or updated.&lt;/p&gt;

&lt;p&gt;Creating the association gets a bit more complicated. While I will not include every single line of code that I used, here was my general process. Once a book has been validated and created, we want to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Find or create a collection of tags based on the user input&lt;/li&gt;
  &lt;li&gt;Preload the association between books and tags&lt;/li&gt;
  &lt;li&gt;Associate the collection of tags with the book being created&lt;/li&gt;
  &lt;li&gt;Update the book in the database&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;associate_with_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag_collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Changeset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Changeset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put_assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag_collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To test this, you can also instantiate a book with a pre-existing collecton of tags.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;My book&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;author:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Jane Smith&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;tags:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;awesome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pretty easy, right? Associations aren’t quite as scary as they seem. To see more code, &lt;a href=&quot;https://github.com/beccanelson/bookish&quot;&gt;check out the project on github&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Oct 2016 00:00:00 -0500</pubDate>
        <link>http://beccanelson.is/associations-in-phoenix-2</link>
        <guid isPermaLink="true">http://beccanelson.is/associations-in-phoenix-2</guid>
        
        
      </item>
    
      <item>
        <title>Associations in Phoenix: One-to-Many</title>
        <description>&lt;p&gt;Right now, I am building a library application using Elixir and Phoenix. &lt;em&gt;Side note: Elixir is really cool, and I highly recommend it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When learning a new language and a new framework, one of the most challenging parts so far has been making associations between models. For example, here is the schema for my application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Screen Shot 2016-10-20 at 5.08.16 PM.png&quot; alt=&quot;schema&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I have two different types of relationships. I have a one-to-many relationsip between Books and CheckOuts, and a many-to-many relationship between Books and Tags.&lt;/p&gt;

&lt;h2 id=&quot;one-to-many-associations&quot;&gt;One-to-many associations&lt;/h2&gt;

&lt;p&gt;To create a one-to-many relationship in Phoenix, we need to add associations in the schema using &lt;code class=&quot;highlighter-rouge&quot;&gt;has_many&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;belongs_to&lt;/code&gt;. If you are familiar with Rails, the process is very similar.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# inside models/book.ex&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;books&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:integer&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:check_outs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bookish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CheckOut&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# inside models/check_out.ex&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;check_outs&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:checked_out_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:return_date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Date&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bookish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, we need to add nested routes in the router.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;scope&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bookish&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;pipe_through&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:browser&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PageController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/books&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BookController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;except:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/check_outs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CheckOutController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;only:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now comes the harder part. When we create a new check-out record, we also need to associate it with the correct book_id. If we are using nested routes, we can get the book_id from the route using the plug &lt;code class=&quot;highlighter-rouge&quot;&gt;conn.assigns[:book]&lt;/code&gt;. You can learn more about Phoenix plugs in &lt;a href=&quot;http://www.phoenixframework.org/v0.12.0/docs/understanding-plug&quot;&gt;the docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, we need to use this plug to build an association between book and check_out. Conveniently, there is a &lt;code class=&quot;highlighter-rouge&quot;&gt;build_assoc&lt;/code&gt; function that will do the trick.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;check_out&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check_out_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;changeset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assigns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:check_outs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CheckOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check_out_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_check_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Book has been checked out!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;to:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;new.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;changeset:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In order to test this, we need to preload the association. While I found this whole process a bit difficult to understand, Phoenix speeds up its loading time by only loading associated models for any given query when you specifically ask it to. For example, when you want to load a collection of Books with their associated CheckOuts, you would do it like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;Repo.all(Book) -&amp;gt; Repo.preload(:check_outs)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Stay tuned for Many-to-Many associations in Phoenix!&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Oct 2016 00:00:00 -0500</pubDate>
        <link>http://beccanelson.is/associations-in-phoenix</link>
        <guid isPermaLink="true">http://beccanelson.is/associations-in-phoenix</guid>
        
        
      </item>
    
      <item>
        <title>Applying the 4 Rules of Simple Design in Elixir: Part 2</title>
        <description>&lt;p&gt;In &lt;a href=&quot;/rules-of-simple-design-in-elixir&quot;&gt;Part 1&lt;/a&gt;, I summarized two main points of Corey Haines’s &lt;a href=&quot;https://leanpub.com/4rulesofsimpledesign&quot;&gt;Understanding the Four Rules of Simple Design&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Tests should express intent.&lt;/li&gt;
  &lt;li&gt;Functions should know as little as possible about primitive types.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this point, I will continue to re-interpret some of the main points using examples in Elixir.&lt;/p&gt;

&lt;h2 id=&quot;avoid-god-classes&quot;&gt;Avoid God classes&lt;/h2&gt;

&lt;p&gt;In case you’re not familiar with the term, a &lt;em&gt;God class&lt;/em&gt; refers to a class that does everything. When I first start a project, I often find myself putting everything in one class (or module, in Elixir) to get things moving along, but soon find that the class is doing too many things.&lt;/p&gt;

&lt;p&gt;I really like the point that Corey made when he said, “If we are working on a new behavior, but are not sure where to place it — what object it belongs to — this might be an indication that we have a concept that isn’t expressed well in our system.”&lt;/p&gt;

&lt;p&gt;For example, when working on my version of Conway’s Game of Life, I soon discovered that I had too many things in my Game class. For example, this is what I started with.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a living cell with no neighbors dies in the next generation&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_living_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;refute&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alive_at?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example, there is no distinction between a Game and a World. Because Elixir is not an object-oriented language, it seems a little more unnatural (to me as a beginner) to divide things up.&lt;/p&gt;

&lt;p&gt;After reading Corey’s advice, though, it made sense to extract a World module, which contains the actual data structure that the values are stored in. The rules of the game, naturally, stay in the Game module.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a living cell with no neighbors dies in the next generation&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_living_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;refute&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alive_at?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;to-summarize&quot;&gt;To summarize…&lt;/h2&gt;

&lt;p&gt;There is one more change I could make here that would help to accomplish all three of the points I have made so far. Do you see it?&lt;/p&gt;

&lt;p&gt;Currently, I am setting and checking coordinates using a tuple, which, a: isn’t very expressive, b: is a primitive type, and c: could be extracted into a separate module. The final change I made was to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;Cell&lt;/code&gt; module, which has a location function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a living cell with no neighbors dies in the next generation&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_living_at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tick&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;refute&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;World&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alive_at?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It’s not perfect, but it’s progress. To see more progress, you can check out the &lt;a href=&quot;https://github.com/beccanelson/game-of-life-elixir&quot;&gt;current version of this code&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 00:00:00 -0500</pubDate>
        <link>http://beccanelson.is/rules-of-simple-design-in-elixir-part-2</link>
        <guid isPermaLink="true">http://beccanelson.is/rules-of-simple-design-in-elixir-part-2</guid>
        
        
      </item>
    
      <item>
        <title>Applying the 4 Rules of Simple Design in Elixir</title>
        <description>&lt;h2 id=&quot;so-i-have-a-confession-to-make&quot;&gt;So, I have a confession to make.&lt;/h2&gt;
&lt;p&gt;I am terrible at reading books about code. I mean, I try, but generally concepts don’t really sink in until I have implemented them myself.&lt;/p&gt;

&lt;p&gt;This week, I’ve been reading &lt;a href=&quot;https://leanpub.com/4rulesofsimpledesign&quot;&gt;Understanding the 4 Rules of Simple Design&lt;/a&gt; by Corey Haines. While I did find it to be one of the most understandable coding books I’ve read in quite a while, it still helped me to work through the examples myself. Also, I have taken on the added challenge of following the rules while building an application in Elixir.&lt;/p&gt;

&lt;p&gt;The example given in the book is Conway’s Game of Life, which if you are unfamiliar with, you can read more about &lt;a href=&quot;https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;here&lt;/a&gt;. I won’t re-write the book, but I will summarize some of the main points using my Elixir implementation.&lt;/p&gt;

&lt;p&gt;Though these don’t exactly line up with Kent Beck’s original four rules, here were my main takeaways.&lt;/p&gt;

&lt;h3 id=&quot;tests-should-express-intent&quot;&gt;Tests should express intent.&lt;/h3&gt;

&lt;p&gt;Though I’ve often heard that we should use descriptive variable names and clear method names, it’s also true that we should favor expressive method names over the ones built into the language.&lt;/p&gt;

&lt;p&gt;For example, this is a perfectly valid way to write the first test.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a new game has an empty world&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, this test has a couple of problems. First of all, the test assumes that the Game data is a List type, and the test would break if the the data was stored in another way. Also, the test doesn’t explicitly say anything about the world being empty. Perhaps this is a better way to do it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;a new game has an empty world&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_empty&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Note the awesome Elixir pipe operator, which evaluates the function on the left-hand side and pipes it in as the first argument to the function on the right. Pretty neat!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While this test requires me to add an additional function to my code, it is clearer and allows my code to change. If I change my data type, I can change is_empty, but I don’t need to change this test.&lt;/p&gt;

&lt;h3 id=&quot;functions-should-know-as-little-as-possible-about-primitive-types&quot;&gt;Functions should know as little as possible about primitive types.&lt;/h3&gt;

&lt;p&gt;Along the same lines as using expressive function names, whenever possible, functions should know as little as possible about the actual types they are dealing with. This looks a little different in a functional language than it does in an object-oriented language, as logic will be extracted as a function rather than a class. Take this function for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alive_at?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:alive&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Like the previous example, this function assumes that the data structure is a List. Also, it handles the conversion from a coordinate to an index, and assumes that an alive cell will contain the atom &lt;code class=&quot;highlighter-rouge&quot;&gt;:alive&lt;/code&gt;. As a primary function in the public API of this application, it would be easier to extract this logic elsewhere. Though there’s no one right way to do this, this is what I ended up with.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elixir&quot; data-lang=&quot;elixir&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alive_at?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get_at_coordinate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_at_coordinate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alive?&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_at_coordinate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coordinate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coordinate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alive?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:alive&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Though it could be argued that this level of extraction is a little bit excessive, I like hiding logic in private functions that are easier to change. Also, I think &lt;code class=&quot;highlighter-rouge&quot;&gt;alive_at?&lt;/code&gt; expresses its intent much more clearly.&lt;/p&gt;

&lt;p&gt;For more takeaways from Understanding the 4 Rules of Simple Design, stay tuned for part 2!&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Oct 2016 00:00:00 -0500</pubDate>
        <link>http://beccanelson.is/rules-of-simple-design-in-elixir</link>
        <guid isPermaLink="true">http://beccanelson.is/rules-of-simple-design-in-elixir</guid>
        
        
      </item>
    
      <item>
        <title>Journaling 101</title>
        <description>&lt;p&gt;Last week, I gave a small talk on the benefits of journaling, and I would like to share some of my thoughts here as well.&lt;/p&gt;

&lt;p&gt;Even when I was a kid, journaling was something that helped me to process my thoughts. And while I’m sure it’s been beneficial for my mental health over the years, the downside to this is that I have in my possession full, annotated documentation of many of my most cringeworthy moments. For that reason, in recent years, I have come to prefer password-protected word documents over Hello Kitty notebooks, but my practice has stayed largely the same.&lt;/p&gt;

&lt;h2 id=&quot;why-do-i-journal&quot;&gt;Why do I journal?&lt;/h2&gt;

&lt;h3 id=&quot;reflection&quot;&gt;Reflection&lt;/h3&gt;

&lt;p&gt;While I often fail at this, I try to write something every day. And by something, I mean a lot of total nonsense. Typically it’s a grammatically-incorrect laundry list of all the things I’m stressed about, or a recollection of a conversation I had, or something good that happened today.&lt;/p&gt;

&lt;p&gt;Journaling also helps us to learn more about ourselves, and to see patterns in our reactions and in our behaviors. Self-knowledge is power—it can help us to better understand our strengths and weaknesses and make better decisions.&lt;/p&gt;

&lt;h3 id=&quot;goal-setting&quot;&gt;Goal Setting&lt;/h3&gt;

&lt;p&gt;I recently had this experience where I read back over some of my journal entries from last year, and came across some goals I had set for this year. Even though there are still things I’m striving for, it gave me a lot of confidence to know that I now met many of my goals.&lt;/p&gt;

&lt;p&gt;Journaling is our written documentation of our hopes, our wishes, and our regrets. By reflecting on the goals you have met and the ones you haven’t, we can get a better idea of where our personal narrative is headed.&lt;/p&gt;

&lt;h3 id=&quot;practice&quot;&gt;Practice&lt;/h3&gt;

&lt;p&gt;When I was a kid, my other favorite thing to do was play the piano. I would like to take this moment to give a shout out to my parents, who listened to me play all the wrong notes over and over again for years before they finally invested in an electronic piano with headphones. But the lesson I have learned from this is that we will never get better at something until we do it badly many times.&lt;/p&gt;

&lt;p&gt;Even though my journal entries are usually jumbled together thoughts that are rarely grammatically correct, I believe the practice of journaling has made me a better writer, and a better overall communicator.&lt;/p&gt;

&lt;h2 id=&quot;journaling-for-professional-improvement&quot;&gt;Journaling for Professional Improvement&lt;/h2&gt;

&lt;p&gt;Though we usually think of journaling as a personal activity, Lately, I have been exploring some ways to use it in a professional setting. In any job, it helps to think about questions like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What went well? What can I do better?&lt;/li&gt;
  &lt;li&gt;What did I get done today? How did it make me feel?&lt;/li&gt;
  &lt;li&gt;What do I want to accomplish next?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From my own experience, keeping a record of what I have accomplished—even if it’s just for me can be a powerful way to combat imposter syndrome.&lt;/p&gt;

&lt;h3 id=&quot;problem-solving&quot;&gt;Problem Solving&lt;/h3&gt;

&lt;p&gt;When I researched professional journaling, one of the points that stood out to me was the importance of sequential thought.&lt;/p&gt;

&lt;p&gt;Sometimes, when we encounter a problem, whether it is personal or professional, it’s easy to get get stuck. Sometimes the same thoughts or feelings will play on repeat in our head, holding us back from moving forward. While it’s certainly possible to write down the same thoughts many times, on paper it becomes more obvious that we need to break the cycle and do the next thing. The process of writing can lead us to more sequential thoughts.&lt;/p&gt;

&lt;h2 id=&quot;ideas&quot;&gt;Ideas:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;If you are a more structured person, make a template with some specific questions to reflect on every day.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;If you are a less structured person, try mixing it up. You can try art journaling, or journaling through a book you are reading.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Journaling can be really good for mental health, as it is one area of our lives where we don’t need to perform for anyone. Our thoughts can be incorrect, repetitive, and unedited, and no one else ever needs to know. The best part about journaling is that it is completely free, you can start anytime, and there are very few disadvantages.&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Sep 2016 00:00:00 -0500</pubDate>
        <link>http://beccanelson.is/journaling</link>
        <guid isPermaLink="true">http://beccanelson.is/journaling</guid>
        
        
      </item>
    
      <item>
        <title>Testing DOM Events with Jasmine</title>
        <description>&lt;p&gt;This week, I’ve been continuing to work on building a Tic Tac Toe client with Backbone.js. Whenever you are working with any kind of JavaScript, one of the bigger challenges (in my opinion) is testing DOM events. In this case, I am using Jasmine and Jasmine-jQuery to test my application.&lt;/p&gt;

&lt;p&gt;For example, this is one of the functions from my &lt;code class=&quot;highlighter-rouge&quot;&gt;GameView&lt;/code&gt; class.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;spotClicked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spotClicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'enabled'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disableAllSpots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;makeMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spotClicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;endTurn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;enableEmptySpots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is an event handler for a click event. It returns the id of the spot that was clicked and updates the model based on that id. There are a couple of tricky things going on here. First of all, how do you mock a click event? Second, how do you test that the other functions are getting called?&lt;/p&gt;

&lt;p&gt;While my solution is in no way the definitive solution to a problem like this, this is how I tacked this problem.&lt;/p&gt;

&lt;h3 id=&quot;fixtures&quot;&gt;Fixtures&lt;/h3&gt;

&lt;p&gt;First of all, I am using fixtures through &lt;a href=&quot;https://github.com/velesin/jasmine-jquery&quot;&gt;Jasmine-jQuery&lt;/a&gt; to ensure that my test file knows about the HTML it is testing. In the past I have used &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;handlebars&lt;/a&gt; templates in order to extract my fixtures from the actual project HTML, but for the purpose of this project I just copied the HTML I needed into a separate directory.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;gameView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GameView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;jasmine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFixtures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fixturesPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./spec/fixtures'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;jasmine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFixtures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'board.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;mocking-a-click-event&quot;&gt;Mocking a click event&lt;/h3&gt;

&lt;p&gt;I spent some time researching Jasmine spyEvents before deciding on a much simpler solution. Looking at the code, all we really need is an object that returns a jQuery object when &lt;code class=&quot;highlighter-rouge&quot;&gt;.currentTarget&lt;/code&gt; is called.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;gameView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we are using fixtures, then the tests will be able to find the id &lt;code class=&quot;highlighter-rouge&quot;&gt;#0&lt;/code&gt; in the HTML.&lt;/p&gt;

&lt;h3 id=&quot;testing-function-calls&quot;&gt;Testing function calls&lt;/h3&gt;

&lt;p&gt;Assuming that all of the functions inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;move&lt;/code&gt; function have been tested individually, all we really need to do is make sure they are being called when a spot is clicked.&lt;/p&gt;

&lt;p&gt;For this, Jasmine provides us with a really cool function called &lt;code class=&quot;highlighter-rouge&quot;&gt;spyOn()&lt;/code&gt;, which has become one of my favorite testing tricks. Before you call the function you are testing, you can tell Jasmine to spy on other functions that should be invoked.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;updates the model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gameView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;makeMove&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;gameView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gameView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;makeMove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toHaveBeenCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pretty simple, right? Testing DOM events can be complicated, but this is a good place to start.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Sep 2016 00:00:00 -0500</pubDate>
        <link>http://beccanelson.is/testing-dom-events-with-jasmine</link>
        <guid isPermaLink="true">http://beccanelson.is/testing-dom-events-with-jasmine</guid>
        
        
      </item>
    
      <item>
        <title>Require.js vs. Browserify</title>
        <description>&lt;p&gt;&lt;a href=&quot;./file-management-with-requirejs&quot;&gt;I wrote last week&lt;/a&gt; about importing JavaScript files into your project using Require.js. While Require.js solved a lot of problems I had encountered in the past, it also created some. Require.js did not get along particularly well with my testing suite, and I found myself using a lot of workarounds to make it work. So, when I re-factored our tic-tac-toe game yesterday, I went looking for an alternative.&lt;/p&gt;

&lt;p&gt;I did some research, and discovered that the two most popular alternatives are &lt;a href=&quot;https://webpack.github.io/&quot;&gt;webpack&lt;/a&gt; and &lt;a href=&quot;http://browserify.org/&quot;&gt;browserify&lt;/a&gt;. For this project, I decided to try out Browserify.&lt;/p&gt;

&lt;h3 id=&quot;what-is-browserify&quot;&gt;What is Browserify?&lt;/h3&gt;

&lt;p&gt;Browserify is an NPM package that allows you to use node syntax (&lt;code class=&quot;highlighter-rouge&quot;&gt;require(./my-file)&lt;/code&gt;) to import files and packages. When you run the Browserify command, it will compile all of your required files into a single bundle file that your project depends on.&lt;/p&gt;

&lt;p&gt;This isn’t intended to be a full tutorial, but here are the steps I took to use Browserify.&lt;/p&gt;

&lt;p&gt;First, I installed the browserify command on my system with &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g browserify&lt;/code&gt;. If you’re unfamiliar with npm, the &lt;code class=&quot;highlighter-rouge&quot;&gt;-g&lt;/code&gt; flag indicates that this package is being installed globally on your system (rather than in this specific project).&lt;/p&gt;

&lt;p&gt;Then, I needed to export my classes to import them. This was a matter of adding one line of code to the bottom of each public code. For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// UI functions here&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once I have done that, I can add my &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; statements at the top of each file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./ui'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By default, Browserify will look for a npm package with that name (like jQuery), but you can specify that Browserify should look for a local file.&lt;/p&gt;

&lt;p&gt;Once you have done this, it’s really easy to bundle all of your files together and require the bundled file in &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;. I did this in the terminal with &lt;code class=&quot;highlighter-rouge&quot;&gt;browserify src/main.js -o bundle.js&lt;/code&gt;. Now I just need one import statement in my html: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot; src=&quot;bundle.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default, you need to re-run the browserify command every time you make any changes to your project. However, you can also use a npm package called &lt;a href=&quot;https://github.com/substack/watchify&quot;&gt;watchify&lt;/a&gt; to watch for changes to your project and automatically re-load your bundled file.&lt;/p&gt;

&lt;h3 id=&quot;will-this-mess-up-my-tests&quot;&gt;Will this mess up my tests?&lt;/h3&gt;

&lt;p&gt;We tested our tic-tac-toe client using Jasmine and Testem, and I was surprised by how easy it was to get our tests working again after adding Browserify. (This, I found, was the major drawback of Require.js).&lt;/p&gt;

&lt;p&gt;There’s probably multiple ways to approach this, but here’s what worked for me.&lt;/p&gt;

&lt;p&gt;I created a separate &lt;code class=&quot;highlighter-rouge&quot;&gt;test.js&lt;/code&gt; file that was the main entry point to my test files. In this file, I required all of my test dependencies and spec files.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'../jasmine/lib/jasmine-jquery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./UISpec'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./GameStateSpec'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// etcetera&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, I added &lt;code class=&quot;highlighter-rouge&quot;&gt;require&lt;/code&gt; statements to the spec files the same way I did for the rest of my classes. Finally, I created a &lt;code class=&quot;highlighter-rouge&quot;&gt;test_bundle.js&lt;/code&gt; file, and compiled all of my test code into this file with &lt;code class=&quot;highlighter-rouge&quot;&gt;browserify spec/test.js -o test_bundle.js&lt;/code&gt;. Now, my test framework only needs to know about these two files.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;testem.yml&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;framework&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jasmine2&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;serve_files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test_bundle.js&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;src_files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;spec/test.js&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;launch_in_dev&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Chrome&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Safari&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;so-whats-the-verdict&quot;&gt;So, what’s the verdict?&lt;/h3&gt;

&lt;p&gt;Though Browserify also took a little bit of time to master, I found it much simpler to work with than &lt;code class=&quot;highlighter-rouge&quot;&gt;Require.js&lt;/code&gt;. While I get the impression that it’s not quite as full-featured as Webpack, it provided the functionality I was looking for. In my book, Browserify is a clear winner.&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Sep 2016 00:00:00 -0500</pubDate>
        <link>http://beccanelson.is/requirejs-vs-browserify</link>
        <guid isPermaLink="true">http://beccanelson.is/requirejs-vs-browserify</guid>
        
        
      </item>
    
      <item>
        <title>Required Reading</title>
        <description>&lt;p&gt;Are you ready to see something really gross? Okay, here goes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lib/jquery-git.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/main.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/GameState.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/games/ComputerVsComputerGame.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/games/ComputerVsPlayerGame.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/games/PlayerVsPlayerGame.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/games/PlayerVsComputerGame.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/GameFactory.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/HttpClient.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;src/ui.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This was the head of the HTML document for our JavaScript tic-tac-toe application. Can you see the problem? Yes, that’s a lot of script imports.&lt;/p&gt;

&lt;p&gt;This method of importing script files may work in a pinch, but it creates some problems. First of all, you’re in trouble if the files aren’t imported in the right order. Also, it just looks terrible.&lt;/p&gt;

&lt;p&gt;As I am re-constructing our tic-tac-toe client using Backbone.js, one of my goals was to find a better way to handle all these script imports. I did a little bit of research, and decided to try &lt;a href=&quot;http://requirejs.org&quot;&gt;Require.js&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-is-requirejs&quot;&gt;What is Require.js?&lt;/h2&gt;

&lt;p&gt;Require.js is a dependency management script that helps you to simplify file importing.&lt;/p&gt;

&lt;h2 id=&quot;how-do-you-use-it&quot;&gt;How do you use it?&lt;/h2&gt;

&lt;p&gt;Require.js is pretty easy to set up.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://requirejs.org/docs/download.html&quot;&gt;Download Require.js&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;I put the file in &lt;code class=&quot;highlighter-rouge&quot;&gt;js/lib/require/require.js&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a main JavaScript file.&lt;/p&gt;

    &lt;p&gt;I created a file called ‘js/main.js’.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Import &lt;code class=&quot;highlighter-rouge&quot;&gt;require.js&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Require.js uses a special import statement that specifies a data-main attribute. The data-main attribute is the main JavaScript file you just created, and the source is the Require.js source file. This is the line I added to the head of my &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;script data-main=&quot;js/main&quot; src=&quot;js/lib/require/require.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, I can use Require.js to import dependencies for my entire peoject.&lt;/p&gt;

&lt;p&gt;Because I am building this project with Backbone and jQuery, the entire project depends on Backbone, jQuery, and Underscore.js. This is what my current file structure looks like.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;s&quot;&gt;├── index.html&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;└── js&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;├── application&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;│   ├── models&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;│   │   └── Game.js&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;│   └── views&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;│       └── BoardView.js&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;├── lib&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;│   ├── backbone&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;│   │   └── backbone-min.js&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;│   ├── jquery&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;│   │   └── jquery-3.1.0.min.js&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;│   ├── require&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;│   │   └── require.js&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;│   └── underscore&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;│       └── underscore-min.js&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;└── main.js&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inside of &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt;, I included some configuration to import my dependencies for the entire project.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;baseUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;jquery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lib/jquery/jquery-3.1.0.min'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;underscore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lib/underscore/underscore-min'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;backbone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lib/backbone/backbone-min'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;shim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;underscore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'_'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;backbone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'underscore'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Backbone'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;baseUrl&lt;/code&gt; option just specifies where the JavaScript projects for the project are located, which in this case is the &lt;code class=&quot;highlighter-rouge&quot;&gt;js/&lt;/code&gt; folder. After that, I can specify the path to each of the imports in the &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;One thing to note here is the shim configuration. Shims are optional, but sometimes help with browser compatibility.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt;, I also required any JavaScript files I needed to initialize my Backbone router, models, and views.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'backbone'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'application/models/Game'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'application/views/BoardView'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Backbone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BoardView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// initialize Backbone router, models, and views&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After this, there is one more step.&lt;/p&gt;

&lt;p&gt;Require.js will only require one file in another if it is specified in a &lt;code class=&quot;highlighter-rouge&quot;&gt;define&lt;/code&gt; block. For example, in my Game model, I needed to specify that my model depended on both Backbone and jQuery. I needed to do the same in my test files in order to test a specific file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jquery'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'backbone'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Backbone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Game&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Backbone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Game methods&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Game&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Overall, Require.js is a bit of a learning curve, but I like it much better than the mess I started with.&lt;/p&gt;

&lt;h2 id=&quot;helpful-links&quot;&gt;Helpful links:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://todomvc.com/examples/backbone_require/&quot;&gt;Todo MVC&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.sitepoint.com/understanding-requirejs-for-effective-javascript-module-loading/&quot;&gt;Understanding RequireJS for Effective JavaScript Module Loading&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Aug 2016 00:00:00 -0500</pubDate>
        <link>http://beccanelson.is/file-management-with-requirejs</link>
        <guid isPermaLink="true">http://beccanelson.is/file-management-with-requirejs</guid>
        
        
      </item>
    
      <item>
        <title>To Framework or Not To Framework</title>
        <description>&lt;p&gt;As the final piece of my pairing project, we were asked to build a JavaScript client for our tic-tac-toe application in addition to the iOS application in Swift we had already built.&lt;/p&gt;

&lt;p&gt;In JavaScript land, though, it’s pretty rare to just build something in JavaScript. If you don’t know what I’m talking about, I challenge you to go to a tech meetup and start a conversation about your Javascript project. There will be questions about React and Ember and Backbone, there will be a heated debate about whether &lt;strong&gt;real&lt;/strong&gt;  JavaScript developers can use jQuery. Design patterns and templating libraries will be discussed, as well as the benefits and drawbacks of ES6 vs. previous versions that are better for testing and browser compatibility. By the end, you will either be best friends or mortal enemies. I can say this authoritatively, because my brother is a developer who works primarily with JavaScript, and I have just summarized every single conversation we’ve had over the past year.&lt;/p&gt;

&lt;p&gt;But anyway, when we stared this final piece of our project, my pair and I made the (perhaps controversial) decision to stick with vanilla JavaScript and jQuery rather than venturing into the land of frameworks and templating libraries and ES6. (We tried out some ES6, but backtracked after it broke all of our tests.)&lt;/p&gt;

&lt;p&gt;Frameworks &lt;em&gt;do&lt;/em&gt; have many advantages, such as management of dependencies and a more straightforward way to implement MVC and other design patterns, there are a few reasons why I think choosing not to use one for this project was a good idea.&lt;/p&gt;

&lt;h3 id=&quot;scope&quot;&gt;Scope&lt;/h3&gt;

&lt;p&gt;The scope of this project was pretty small. The goal was to build an application that plays tic-tac-toe, and allows the user to choose between a human, an easy computer, or a hard computer for each player. Sticking with what we knew, it was possible for us to build this application in a couple of days. If we had used a framework, we would have needed to build the learning curve into the scope of the project and estimate more time to complete the project.&lt;/p&gt;

&lt;h3 id=&quot;learning-experience&quot;&gt;Learning experience&lt;/h3&gt;

&lt;p&gt;I’ve done a couple of different projects this way now, and I do think that it’s important to learn how to implement good design patterns without a framework that is forcing you to do so. Using vanilla JavaScript does open your eyes to some of its drawbacks, and I do feel like I have a better understanding now about why people choose to use frameworks.&lt;/p&gt;

&lt;p&gt;Overall, I feel like we were able to use very simple objects and design patterns to create something that provided value to our (imaginary) clients. In the end, we didn’t feel like it was over-engineered or poorly designed. As I venture into a framework this week, I feel like I have a better understanding of its benefits and drawbacks than I would have if I hadn’t spent time not using one.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Aug 2016 00:00:00 -0500</pubDate>
        <link>http://beccanelson.is/to-framework-or-not-to-framework</link>
        <guid isPermaLink="true">http://beccanelson.is/to-framework-or-not-to-framework</guid>
        
        
      </item>
    
  </channel>
</rss>
